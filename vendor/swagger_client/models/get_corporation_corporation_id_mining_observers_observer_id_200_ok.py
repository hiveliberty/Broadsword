# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.7.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCorporationCorporationIdMiningObserversObserverId200Ok(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated': 'date',
        'character_id': 'int',
        'recorded_corporation_id': 'int',
        'type_id': 'int',
        'quantity': 'int'
    }

    attribute_map = {
        'last_updated': 'last_updated',
        'character_id': 'character_id',
        'recorded_corporation_id': 'recorded_corporation_id',
        'type_id': 'type_id',
        'quantity': 'quantity'
    }

    def __init__(self, last_updated=None, character_id=None, recorded_corporation_id=None, type_id=None, quantity=None):
        """
        GetCorporationCorporationIdMiningObserversObserverId200Ok - a model defined in Swagger
        """

        self._last_updated = None
        self._character_id = None
        self._recorded_corporation_id = None
        self._type_id = None
        self._quantity = None
        self.discriminator = None

        self.last_updated = last_updated
        self.character_id = character_id
        self.recorded_corporation_id = recorded_corporation_id
        self.type_id = type_id
        self.quantity = quantity

    @property
    def last_updated(self):
        """
        Gets the last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        last_updated string

        :return: The last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        last_updated string

        :param last_updated: The last_updated of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type: date
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def character_id(self):
        """
        Gets the character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        The character that did the mining 

        :return: The character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """
        Sets the character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        The character that did the mining 

        :param character_id: The character_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")

        self._character_id = character_id

    @property
    def recorded_corporation_id(self):
        """
        Gets the recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        The corporation id of the character at the time data was recorded. 

        :return: The recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._recorded_corporation_id

    @recorded_corporation_id.setter
    def recorded_corporation_id(self, recorded_corporation_id):
        """
        Sets the recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        The corporation id of the character at the time data was recorded. 

        :param recorded_corporation_id: The recorded_corporation_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type: int
        """
        if recorded_corporation_id is None:
            raise ValueError("Invalid value for `recorded_corporation_id`, must not be `None`")

        self._recorded_corporation_id = recorded_corporation_id

    @property
    def type_id(self):
        """
        Gets the type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        type_id integer

        :return: The type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        type_id integer

        :param type_id: The type_id of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def quantity(self):
        """
        Gets the quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        quantity integer

        :return: The quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        quantity integer

        :param quantity: The quantity of this GetCorporationCorporationIdMiningObserversObserverId200Ok.
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCorporationCorporationIdMiningObserversObserverId200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

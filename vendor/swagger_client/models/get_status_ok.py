# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.7.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetStatusOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'datetime',
        'players': 'int',
        'server_version': 'str',
        'vip': 'bool'
    }

    attribute_map = {
        'start_time': 'start_time',
        'players': 'players',
        'server_version': 'server_version',
        'vip': 'vip'
    }

    def __init__(self, start_time=None, players=None, server_version=None, vip=None):
        """
        GetStatusOk - a model defined in Swagger
        """

        self._start_time = None
        self._players = None
        self._server_version = None
        self._vip = None
        self.discriminator = None

        self.start_time = start_time
        self.players = players
        self.server_version = server_version
        if vip is not None:
          self.vip = vip

    @property
    def start_time(self):
        """
        Gets the start_time of this GetStatusOk.
        Server start timestamp

        :return: The start_time of this GetStatusOk.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this GetStatusOk.
        Server start timestamp

        :param start_time: The start_time of this GetStatusOk.
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def players(self):
        """
        Gets the players of this GetStatusOk.
        Current online player count

        :return: The players of this GetStatusOk.
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """
        Sets the players of this GetStatusOk.
        Current online player count

        :param players: The players of this GetStatusOk.
        :type: int
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")

        self._players = players

    @property
    def server_version(self):
        """
        Gets the server_version of this GetStatusOk.
        Running version as string

        :return: The server_version of this GetStatusOk.
        :rtype: str
        """
        return self._server_version

    @server_version.setter
    def server_version(self, server_version):
        """
        Sets the server_version of this GetStatusOk.
        Running version as string

        :param server_version: The server_version of this GetStatusOk.
        :type: str
        """
        if server_version is None:
            raise ValueError("Invalid value for `server_version`, must not be `None`")

        self._server_version = server_version

    @property
    def vip(self):
        """
        Gets the vip of this GetStatusOk.
        If the server is in VIP mode

        :return: The vip of this GetStatusOk.
        :rtype: bool
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """
        Sets the vip of this GetStatusOk.
        If the server is in VIP mode

        :param vip: The vip of this GetStatusOk.
        :type: bool
        """

        self._vip = vip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetStatusOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

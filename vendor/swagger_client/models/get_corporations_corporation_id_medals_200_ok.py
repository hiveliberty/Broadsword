# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.7.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCorporationsCorporationIdMedals200Ok(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'medal_id': 'int',
        'title': 'str',
        'description': 'str',
        'creator_id': 'int',
        'created_at': 'datetime'
    }

    attribute_map = {
        'medal_id': 'medal_id',
        'title': 'title',
        'description': 'description',
        'creator_id': 'creator_id',
        'created_at': 'created_at'
    }

    def __init__(self, medal_id=None, title=None, description=None, creator_id=None, created_at=None):
        """
        GetCorporationsCorporationIdMedals200Ok - a model defined in Swagger
        """

        self._medal_id = None
        self._title = None
        self._description = None
        self._creator_id = None
        self._created_at = None
        self.discriminator = None

        self.medal_id = medal_id
        self.title = title
        self.description = description
        self.creator_id = creator_id
        self.created_at = created_at

    @property
    def medal_id(self):
        """
        Gets the medal_id of this GetCorporationsCorporationIdMedals200Ok.
        medal_id integer

        :return: The medal_id of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """
        Sets the medal_id of this GetCorporationsCorporationIdMedals200Ok.
        medal_id integer

        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedals200Ok.
        :type: int
        """
        if medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")

        self._medal_id = medal_id

    @property
    def title(self):
        """
        Gets the title of this GetCorporationsCorporationIdMedals200Ok.
        title string

        :return: The title of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GetCorporationsCorporationIdMedals200Ok.
        title string

        :param title: The title of this GetCorporationsCorporationIdMedals200Ok.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this GetCorporationsCorporationIdMedals200Ok.
        description string

        :return: The description of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GetCorporationsCorporationIdMedals200Ok.
        description string

        :param description: The description of this GetCorporationsCorporationIdMedals200Ok.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")

        self._description = description

    @property
    def creator_id(self):
        """
        Gets the creator_id of this GetCorporationsCorporationIdMedals200Ok.
        ID of the character who created this medal

        :return: The creator_id of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this GetCorporationsCorporationIdMedals200Ok.
        ID of the character who created this medal

        :param creator_id: The creator_id of this GetCorporationsCorporationIdMedals200Ok.
        :type: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def created_at(self):
        """
        Gets the created_at of this GetCorporationsCorporationIdMedals200Ok.
        created_at string

        :return: The created_at of this GetCorporationsCorporationIdMedals200Ok.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this GetCorporationsCorporationIdMedals200Ok.
        created_at string

        :param created_at: The created_at of this GetCorporationsCorporationIdMedals200Ok.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCorporationsCorporationIdMedals200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
